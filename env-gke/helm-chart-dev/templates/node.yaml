kind: Service
apiVersion: v1
metadata:
  name: backendservice
  labels:
    app.kubernetes.io/name: {{ .Values.app.backendName }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  selector:
    app.kubernetes.io/name: {{ .Values.app.backendName }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  ports:
  - protocol: TCP
    port: {{ .Values.service.port }}
    targetPort: http-backend
  type: {{ .Values.service.type }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-{{ .Values.app.backendName }}-deployment"
  labels:
    app.kubernetes.io/name: {{ .Values.app.backendName }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.app.backendName }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.app.backendName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        date: "{{ .Release.Time.Seconds }}"
    spec:
      containers:
        - name: {{ .Values.app.backendName }}
          image: "{{ .Values.imageserver.repository }}:{{ .Values.imageserver.tag }}"
          imagePullPolicy: {{ .Values.imageserver.pullPolicy }}
          resources:
            requests:
              cpu: 50m
          env:
          - name: ENV
            value: production
          - name: MYSQL_HOST
            value: mysqlservice
          - name: MYSQL_DATABASE
            value: app
          - name: MYSQL_ROOT_PASSWORD
            value: password
          - name: PORT
            value: "3002"
          ports:
          - name: http-backend
            containerPort: 3002
          volumeMounts:
          - name: mysql-persistent-storage
            mountPath: /var/lib/node
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: "{{ .Values.app.backendName }}-vc"